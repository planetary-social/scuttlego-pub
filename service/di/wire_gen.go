// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"path/filepath"

	"github.com/boreq/errors"
	"github.com/dgraph-io/badger/v3"
	"github.com/google/wire"
	"github.com/planetary-social/scuttlego-pub/service"
	badger3 "github.com/planetary-social/scuttlego-pub/service/adapters/badger"
	"github.com/planetary-social/scuttlego-pub/service/app"
	commands2 "github.com/planetary-social/scuttlego-pub/service/app/commands"
	"github.com/planetary-social/scuttlego-pub/service/domain/messages/transport"
	"github.com/planetary-social/scuttlego/logging"
	migrations2 "github.com/planetary-social/scuttlego/migrations"
	"github.com/planetary-social/scuttlego/service/adapters"
	badger2 "github.com/planetary-social/scuttlego/service/adapters/badger"
	"github.com/planetary-social/scuttlego/service/adapters/badger/notx"
	ebt2 "github.com/planetary-social/scuttlego/service/adapters/ebt"
	"github.com/planetary-social/scuttlego/service/adapters/migrations"
	"github.com/planetary-social/scuttlego/service/adapters/pubsub"
	"github.com/planetary-social/scuttlego/service/app/commands"
	"github.com/planetary-social/scuttlego/service/app/queries"
	"github.com/planetary-social/scuttlego/service/domain"
	"github.com/planetary-social/scuttlego/service/domain/blobs"
	replication2 "github.com/planetary-social/scuttlego/service/domain/blobs/replication"
	"github.com/planetary-social/scuttlego/service/domain/feeds/content"
	transport2 "github.com/planetary-social/scuttlego/service/domain/feeds/content/transport"
	"github.com/planetary-social/scuttlego/service/domain/feeds/formats"
	"github.com/planetary-social/scuttlego/service/domain/identity"
	"github.com/planetary-social/scuttlego/service/domain/network"
	"github.com/planetary-social/scuttlego/service/domain/network/local"
	"github.com/planetary-social/scuttlego/service/domain/replication"
	"github.com/planetary-social/scuttlego/service/domain/replication/ebt"
	"github.com/planetary-social/scuttlego/service/domain/replication/gossip"
	"github.com/planetary-social/scuttlego/service/domain/rooms"
	"github.com/planetary-social/scuttlego/service/domain/rooms/tunnel"
	transport3 "github.com/planetary-social/scuttlego/service/domain/transport"
	"github.com/planetary-social/scuttlego/service/domain/transport/boxstream"
	"github.com/planetary-social/scuttlego/service/domain/transport/rpc"
	"github.com/planetary-social/scuttlego/service/domain/transport/rpc/mux"
	network2 "github.com/planetary-social/scuttlego/service/ports/network"
	pubsub2 "github.com/planetary-social/scuttlego/service/ports/pubsub"
	rpc2 "github.com/planetary-social/scuttlego/service/ports/rpc"
	"github.com/sirupsen/logrus"
)

// Injectors from wire.go:

func buildBadgerNoTxTxAdapters(txn *badger.Txn, public identity.Public, config service.Config, logger logging.Logger) (notx.TxAdapters, error) {
	banListHasher := adapters.NewBanListHasher()
	banListRepository := badger2.NewBanListRepository(txn, banListHasher)
	blobRepository := badger2.NewBlobRepository(txn)
	currentTimeProvider := adapters.NewCurrentTimeProvider()
	blobWantListRepository := badger2.NewBlobWantListRepository(txn, currentTimeProvider)
	feedWantListRepository := badger2.NewFeedWantListRepository(txn, currentTimeProvider)
	messageContentMappings := transport.Mappings()
	marshaler, err := transport2.NewMarshaler(messageContentMappings, logger)
	if err != nil {
		return notx.TxAdapters{}, err
	}
	scanner := blobs.NewScanner()
	parser := content.NewParser(marshaler, scanner)
	messageHMAC := extractMessageHMACFromConfig(config)
	scuttlebutt := formats.NewScuttlebutt(parser, messageHMAC)
	v := newFormats(scuttlebutt)
	rawMessageIdentifier := formats.NewRawMessageIdentifier(v)
	messageRepository := badger2.NewMessageRepository(txn, rawMessageIdentifier)
	receiveLogRepository := badger2.NewReceiveLogRepository(txn, messageRepository)
	hops := extractHopsFromConfig(config)
	socialGraphRepository := badger2.NewSocialGraphRepository(txn, public, hops, banListRepository)
	pubRepository := badger2.NewPubRepository(txn)
	feedRepository := badger2.NewFeedRepository(txn, socialGraphRepository, receiveLogRepository, messageRepository, pubRepository, blobRepository, banListRepository, scuttlebutt)
	wantedFeedsRepository := badger2.NewWantedFeedsRepository(socialGraphRepository, feedWantListRepository, feedRepository, banListRepository)
	txAdapters := notx.TxAdapters{
		BanListRepository:      banListRepository,
		BlobRepository:         blobRepository,
		BlobWantListRepository: blobWantListRepository,
		FeedWantListRepository: feedWantListRepository,
		MessageRepository:      messageRepository,
		ReceiveLogRepository:   receiveLogRepository,
		SocialGraphRepository:  socialGraphRepository,
		PubRepository:          pubRepository,
		FeedRepository:         feedRepository,
		WantedFeedsRepository:  wantedFeedsRepository,
	}
	return txAdapters, nil
}

func buildBadgerScuttlegoCommandsAdapters(txn *badger.Txn, public identity.Public, config service.Config, logger logging.Logger) (commands.Adapters, error) {
	hops := extractHopsFromConfig(config)
	banListHasher := adapters.NewBanListHasher()
	banListRepository := badger2.NewBanListRepository(txn, banListHasher)
	socialGraphRepository := badger2.NewSocialGraphRepository(txn, public, hops, banListRepository)
	messageContentMappings := transport.Mappings()
	marshaler, err := transport2.NewMarshaler(messageContentMappings, logger)
	if err != nil {
		return commands.Adapters{}, err
	}
	scanner := blobs.NewScanner()
	parser := content.NewParser(marshaler, scanner)
	messageHMAC := extractMessageHMACFromConfig(config)
	scuttlebutt := formats.NewScuttlebutt(parser, messageHMAC)
	v := newFormats(scuttlebutt)
	rawMessageIdentifier := formats.NewRawMessageIdentifier(v)
	messageRepository := badger2.NewMessageRepository(txn, rawMessageIdentifier)
	receiveLogRepository := badger2.NewReceiveLogRepository(txn, messageRepository)
	pubRepository := badger2.NewPubRepository(txn)
	blobRepository := badger2.NewBlobRepository(txn)
	feedRepository := badger2.NewFeedRepository(txn, socialGraphRepository, receiveLogRepository, messageRepository, pubRepository, blobRepository, banListRepository, scuttlebutt)
	currentTimeProvider := adapters.NewCurrentTimeProvider()
	blobWantListRepository := badger2.NewBlobWantListRepository(txn, currentTimeProvider)
	feedWantListRepository := badger2.NewFeedWantListRepository(txn, currentTimeProvider)
	commandsAdapters := commands.Adapters{
		Feed:         feedRepository,
		ReceiveLog:   receiveLogRepository,
		SocialGraph:  socialGraphRepository,
		BlobWantList: blobWantListRepository,
		FeedWantList: feedWantListRepository,
		BanList:      banListRepository,
	}
	return commandsAdapters, nil
}

func buildBadgerScuttlegoQueriesAdapters(txn *badger.Txn, public identity.Public, config service.Config, logger logging.Logger) (queries.Adapters, error) {
	hops := extractHopsFromConfig(config)
	banListHasher := adapters.NewBanListHasher()
	banListRepository := badger2.NewBanListRepository(txn, banListHasher)
	socialGraphRepository := badger2.NewSocialGraphRepository(txn, public, hops, banListRepository)
	messageContentMappings := transport.Mappings()
	marshaler, err := transport2.NewMarshaler(messageContentMappings, logger)
	if err != nil {
		return queries.Adapters{}, err
	}
	scanner := blobs.NewScanner()
	parser := content.NewParser(marshaler, scanner)
	messageHMAC := extractMessageHMACFromConfig(config)
	scuttlebutt := formats.NewScuttlebutt(parser, messageHMAC)
	v := newFormats(scuttlebutt)
	rawMessageIdentifier := formats.NewRawMessageIdentifier(v)
	messageRepository := badger2.NewMessageRepository(txn, rawMessageIdentifier)
	receiveLogRepository := badger2.NewReceiveLogRepository(txn, messageRepository)
	pubRepository := badger2.NewPubRepository(txn)
	blobRepository := badger2.NewBlobRepository(txn)
	feedRepository := badger2.NewFeedRepository(txn, socialGraphRepository, receiveLogRepository, messageRepository, pubRepository, blobRepository, banListRepository, scuttlebutt)
	queriesAdapters := queries.Adapters{
		Feed:       feedRepository,
		ReceiveLog: receiveLogRepository,
		Message:    messageRepository,
	}
	return queriesAdapters, nil
}

func buildBadgerPubCommandsAdapters(txn *badger.Txn, public identity.Public, config service.Config, logger logging.Logger) (commands2.Adapters, error) {
	hops := extractHopsFromConfig(config)
	banListHasher := adapters.NewBanListHasher()
	banListRepository := badger2.NewBanListRepository(txn, banListHasher)
	socialGraphRepository := badger2.NewSocialGraphRepository(txn, public, hops, banListRepository)
	inviteRepository := badger3.NewInviteRepository()
	messageContentMappings := transport.Mappings()
	marshaler, err := transport2.NewMarshaler(messageContentMappings, logger)
	if err != nil {
		return commands2.Adapters{}, err
	}
	scanner := blobs.NewScanner()
	parser := content.NewParser(marshaler, scanner)
	messageHMAC := extractMessageHMACFromConfig(config)
	scuttlebutt := formats.NewScuttlebutt(parser, messageHMAC)
	v := newFormats(scuttlebutt)
	rawMessageIdentifier := formats.NewRawMessageIdentifier(v)
	messageRepository := badger2.NewMessageRepository(txn, rawMessageIdentifier)
	receiveLogRepository := badger2.NewReceiveLogRepository(txn, messageRepository)
	pubRepository := badger2.NewPubRepository(txn)
	blobRepository := badger2.NewBlobRepository(txn)
	feedRepository := badger2.NewFeedRepository(txn, socialGraphRepository, receiveLogRepository, messageRepository, pubRepository, blobRepository, banListRepository, scuttlebutt)
	commandsAdapters := commands2.Adapters{
		SocialGraph: socialGraphRepository,
		Invite:      inviteRepository,
		Feed:        feedRepository,
	}
	return commandsAdapters, nil
}

// BuildService creates a new service which uses the provided context as a long-term context used as a base context for
// e.g. established connections.
func BuildService(contextContext context.Context, private identity.Private, config service.Config) (service.Service, func(), error) {
	logrusLoggingSystem := newLoggingSystem()
	logger := newContextLogger(logrusLoggingSystem)
	db, cleanup, err := newBadger(logrusLoggingSystem, logger, config)
	if err != nil {
		return service.Service{}, nil, err
	}
	public := privateIdentityToPublicIdentity(private)
	commandsAdaptersFactory := badgerPubCommandsAdaptersFactory(config, public, logger)
	commandsTransactionProvider := badger3.NewCommandsTransactionProvider(db, commandsAdaptersFactory)
	createInviteHandler := commands2.NewCreateInviteHandler(commandsTransactionProvider)
	currentTimeProvider := adapters.NewCurrentTimeProvider()
	messageContentMappings := transport.Mappings()
	marshaler, err := transport2.NewMarshaler(messageContentMappings, logger)
	if err != nil {
		cleanup()
		return service.Service{}, nil, err
	}
	redeemInviteHandler := commands2.NewRedeemInviteHandler(commandsTransactionProvider, currentTimeProvider, marshaler, private)
	appCommands := app.Commands{
		CreateInvite: createInviteHandler,
		RedeemInvite: redeemInviteHandler,
	}
	appQueries := app.Queries{}
	application := app.Application{
		Commands: appCommands,
		Queries:  appQueries,
	}
	badgerStorage := migrations.NewBadgerStorage(db)
	runner := migrations2.NewRunner(badgerStorage, logger)
	v := newMigrationsList()
	migrationsMigrations, err := migrations2.NewMigrations(v)
	if err != nil {
		cleanup()
		return service.Service{}, nil, err
	}
	runMigrationsHandler := commands.NewRunMigrationsHandler(runner, migrationsMigrations)
	networkKey := extractNetworkKeyFromConfig(config)
	handshaker, err := boxstream.NewHandshaker(private, networkKey, currentTimeProvider)
	if err != nil {
		cleanup()
		return service.Service{}, nil, err
	}
	requestPubSub := pubsub.NewRequestPubSub()
	connectionIdGenerator := rpc.NewConnectionIdGenerator()
	peerInitializer := transport3.NewPeerInitializer(handshaker, requestPubSub, connectionIdGenerator, logger)
	peerManagerConfig := newPeerManagerConfig()
	dialer, err := network.NewDialer(peerInitializer, logger)
	if err != nil {
		cleanup()
		return service.Service{}, nil, err
	}
	tunnelDialer := tunnel.NewDialer(peerInitializer)
	sessionTracker := ebt.NewSessionTracker()
	scanner := blobs.NewScanner()
	parser := content.NewParser(marshaler, scanner)
	messageHMAC := extractMessageHMACFromConfig(config)
	scuttlebutt := formats.NewScuttlebutt(parser, messageHMAC)
	v2 := newFormats(scuttlebutt)
	rawMessageIdentifier := formats.NewRawMessageIdentifier(v2)
	badgerCommandsAdaptersFactory := badgerScuttlegoCommandsAdaptersFactory(config, public, logger)
	badgerCommandsTransactionProvider := badger2.NewCommandsTransactionProvider(db, badgerCommandsAdaptersFactory)
	messageBuffer := commands.NewMessageBuffer(badgerCommandsTransactionProvider, logger)
	rawMessageHandler := commands.NewRawMessageHandler(rawMessageIdentifier, messageBuffer, logger)
	txAdaptersFactory := noTxTxAdaptersFactory(public, config, logger)
	txAdaptersFactoryTransactionProvider := notx.NewTxAdaptersFactoryTransactionProvider(db, txAdaptersFactory)
	noTxWantedFeedsRepository := notx.NewNoTxWantedFeedsRepository(txAdaptersFactoryTransactionProvider)
	wantedFeedsCache := replication.NewWantedFeedsCache(noTxWantedFeedsRepository)
	queriesAdaptersFactory := badgerScuttlegoQueriesAdaptersFactory(config, public, logger)
	queriesTransactionProvider := badger2.NewQueriesTransactionProvider(db, queriesAdaptersFactory)
	messagePubSub := pubsub.NewMessagePubSub()
	createHistoryStreamHandler := queries.NewCreateHistoryStreamHandler(queriesTransactionProvider, messagePubSub, logger)
	createHistoryStreamHandlerAdapter := ebt2.NewCreateHistoryStreamHandlerAdapter(createHistoryStreamHandler)
	sessionRunner := ebt.NewSessionRunner(logger, rawMessageHandler, wantedFeedsCache, createHistoryStreamHandlerAdapter)
	manager := gossip.NewManager(logger, wantedFeedsCache)
	gossipReplicator, err := gossip.NewGossipReplicator(manager, rawMessageHandler, logger)
	if err != nil {
		cleanup()
		return service.Service{}, nil, err
	}
	replicator := ebt.NewReplicator(sessionTracker, sessionRunner, gossipReplicator, logger)
	negotiator := replication.NewNegotiator(logger, replicator, gossipReplicator)
	noTxBlobWantListRepository := notx.NewNoTxBlobWantListRepository(txAdaptersFactoryTransactionProvider)
	noTxBlobsRepository := notx.NewNoTxBlobsRepository(txAdaptersFactoryTransactionProvider)
	storageBlobsThatShouldBePushedProvider, err := replication2.NewStorageBlobsThatShouldBePushedProvider(noTxBlobsRepository, public, currentTimeProvider)
	if err != nil {
		cleanup()
		return service.Service{}, nil, err
	}
	filesystemStorage, err := newFilesystemStorage(logger, config)
	if err != nil {
		cleanup()
		return service.Service{}, nil, err
	}
	blobsGetDownloader := replication2.NewBlobsGetDownloader(filesystemStorage, logger)
	blobDownloadedPubSub := pubsub.NewBlobDownloadedPubSub()
	hasHandler := replication2.NewHasHandler(filesystemStorage, noTxBlobWantListRepository, blobsGetDownloader, blobDownloadedPubSub, logger)
	diManagedWantsProcessFactory := newManagedWantsProcessFactory(noTxBlobWantListRepository, storageBlobsThatShouldBePushedProvider, filesystemStorage, hasHandler, logger)
	replicationManager := replication2.NewManager(diManagedWantsProcessFactory, logger)
	replicationReplicator := replication2.NewReplicator(replicationManager)
	peerRPCAdapter := rooms.NewPeerRPCAdapter(logger)
	roomAttendantEventPubSub := pubsub.NewRoomAttendantEventPubSub()
	roomsScanner := rooms.NewScanner(peerRPCAdapter, peerRPCAdapter, roomAttendantEventPubSub, logger)
	peerManager := domain.NewPeerManager(contextContext, peerManagerConfig, dialer, tunnelDialer, negotiator, replicationReplicator, roomsScanner, logger)
	acceptNewPeerHandler := commands.NewAcceptNewPeerHandler(peerManager)
	listener, err := newListener(contextContext, peerInitializer, acceptNewPeerHandler, config, logger)
	if err != nil {
		cleanup()
		return service.Service{}, nil, err
	}
	discoverer, err := local.NewDiscoverer(public, logger)
	if err != nil {
		cleanup()
		return service.Service{}, nil, err
	}
	processNewLocalDiscoveryHandler := commands.NewProcessNewLocalDiscoveryHandler(peerManager)
	networkDiscoverer := network2.NewDiscoverer(discoverer, processNewLocalDiscoveryHandler, logger)
	establishNewConnectionsHandler := commands.NewEstablishNewConnectionsHandler(peerManager)
	connectionEstablisher := network2.NewConnectionEstablisher(establishNewConnectionsHandler, logger)
	getBlobHandler, err := queries.NewGetBlobHandler(filesystemStorage)
	if err != nil {
		cleanup()
		return service.Service{}, nil, err
	}
	handlerBlobsGet := rpc2.NewHandlerBlobsGet(getBlobHandler)
	createWantsHandler := commands.NewCreateWantsHandler(replicationManager)
	handlerBlobsCreateWants := rpc2.NewHandlerBlobsCreateWants(createWantsHandler)
	handleIncomingEbtReplicateHandler := commands.NewHandleIncomingEbtReplicateHandler(replicator)
	handlerEbtReplicate := rpc2.NewHandlerEbtReplicate(handleIncomingEbtReplicateHandler)
	acceptTunnelConnectHandler := commands.NewAcceptTunnelConnectHandler(public, peerInitializer, peerManager)
	handlerTunnelConnect := rpc2.NewHandlerTunnelConnect(acceptTunnelConnectHandler)
	v3 := rpc2.NewMuxHandlers(handlerBlobsGet, handlerBlobsCreateWants, handlerEbtReplicate, handlerTunnelConnect)
	handlerCreateHistoryStream := rpc2.NewHandlerCreateHistoryStream(createHistoryStreamHandler, logger)
	v4 := rpc2.NewMuxClosingHandlers(handlerCreateHistoryStream)
	muxMux, err := mux.NewMux(logger, v3, v4)
	if err != nil {
		cleanup()
		return service.Service{}, nil, err
	}
	requestSubscriber := pubsub2.NewRequestSubscriber(requestPubSub, muxMux)
	processRoomAttendantEventHandler := commands.NewProcessRoomAttendantEventHandler(peerManager)
	roomAttendantEventSubscriber := pubsub2.NewRoomAttendantEventSubscriber(roomAttendantEventPubSub, processRoomAttendantEventHandler, logger)
	advertiser, err := newAdvertiser(public, config)
	if err != nil {
		cleanup()
		return service.Service{}, nil, err
	}
	garbageCollector := badger2.NewGarbageCollector(db, logger)
	serviceService := service.NewService(application, runMigrationsHandler, listener, networkDiscoverer, connectionEstablisher, requestSubscriber, roomAttendantEventSubscriber, advertiser, messageBuffer, createHistoryStreamHandler, garbageCollector)
	return serviceService, func() {
		cleanup()
	}, nil
}

// wire.go:

var replicatorSet = wire.NewSet(gossip.NewManager, wire.Bind(new(gossip.ReplicationManager), new(*gossip.Manager)), gossip.NewGossipReplicator, wire.Bind(new(replication.CreateHistoryStreamReplicator), new(*gossip.GossipReplicator)), wire.Bind(new(ebt.SelfCreateHistoryStreamReplicator), new(*gossip.GossipReplicator)), ebt.NewReplicator, wire.Bind(new(replication.EpidemicBroadcastTreesReplicator), new(ebt.Replicator)), replication.NewWantedFeedsCache, wire.Bind(new(gossip.ContactsStorage), new(*replication.WantedFeedsCache)), wire.Bind(new(ebt.ContactsStorage), new(*replication.WantedFeedsCache)), ebt.NewSessionTracker, wire.Bind(new(ebt.Tracker), new(*ebt.SessionTracker)), ebt.NewSessionRunner, wire.Bind(new(ebt.Runner), new(*ebt.SessionRunner)), replication.NewNegotiator, wire.Bind(new(domain.MessageReplicator), new(*replication.Negotiator)))

func newAdvertiser(l identity.Public, config service.Config) (*local.Advertiser, error) {
	return local.NewAdvertiser(l, config.ListenAddress)
}

func newBadger(system logging.LoggingSystem, logger logging.Logger, config service.Config) (*badger.DB, func(), error) {
	badgerDirectory := filepath.Join(config.DataDirectory, "badger")

	options := badger.DefaultOptions(badgerDirectory)
	options.Logger = badger2.NewLogger(system, badger2.LoggerLevelWarning)
	options.SyncWrites = true

	db, err := badger.Open(options)
	if err != nil {
		return nil, nil, errors.Wrap(err, "failed to open the database")
	}

	return db, func() {
		if err := db.Close(); err != nil {
			logger.WithError(err).Error("error closing the database")
		}
	}, nil

}

func privateIdentityToPublicIdentity(p identity.Private) identity.Public {
	return p.Public()
}

func newContextLogger(loggingSystem logging.LoggingSystem) logging.Logger {
	return logging.NewContextLogger(loggingSystem, "scuttlego")
}

func newLoggingSystem() logging.LogrusLoggingSystem {
	logger := logrus.New()

	return logging.NewLogrusLoggingSystem(logger)
}

func newPeerManagerConfig() domain.PeerManagerConfig {
	return domain.PeerManagerConfig{
		PreferredPubs: nil,
	}
}
